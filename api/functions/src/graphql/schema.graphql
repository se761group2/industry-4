enum Unit {
  MPS2
  MPS2_RMS
}

enum Status {
  Nominal
  Moderate
  Critical
}

scalar Date

type Machine {
  id: ID!
  name: String!
  healthStatus: Status
  sensors: [Sensor!]!
}

type Sensor {
  id: ID!
  machineId: ID!
  name: String!
  healthStatus: Status
  signals: [Signal!]!
}

type Signal {
  id: ID!
  unit: Unit!
  threshold: Float,
  machineId: ID!,
  sensorId: ID!,
  values: [SampleChunk]
}

type SampleChunk {
  timestamp: Date!,
  timeStepSecs: Float!,
  samples: [Float]!
}

type User {
  id: ID!
  username: String!
  email: String!
  phoneNumber: String!
}

type Query {
  user(id: ID!): User
  machines: [Machine!]!
  machine(id: ID!): Machine
  sensor(machineId: ID! id: ID!): Sensor
}

interface MutationResponse {
  code: String!
  success: Boolean!
  message: String!
}

type UserUpdatedResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
}

type MachineUpdatedResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
}

type SensorCreationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  sensor: Sensor
}

input SensorInput {
  machineID: ID! 
  name: String!
  signals: [Signal!]!
}

input MachineUpdateInput {
  name: String!
  healthStatus: Status
  sensors: [Sensor!]!
}

input SensorUpdateInput {
  name: String!
  healthStatus: Status
}

type Mutation {
  updateUser(id: ID!): MutationResponse
  updateMachine(id: ID! input: MachineUpdateInput): MutationResponse
  updateSensor(id: ID! machineID: ID! input: SensorUpdateInput): MutationResponse
  createMachine(id: ID! name: String!): MutationResponse
  createSensor(id: ID! input: SensorInput): SensorCreationResponse
}
